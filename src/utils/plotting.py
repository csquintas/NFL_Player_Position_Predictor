import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

class Plotter:
    """Plotting methods."""

    def plot_single_player_with_pred(
        df_pred: pd.DataFrame,
        df_npred: pd.DataFrame,
        preds,
        game_id: int,
        play_id: int,
        nfl_id: int,
        preds_dict: dict[int, np.ndarray] | None = None,
        save_fig_path: str | None = None
    ):
        """
        Plot historical, target, and predicted trajectories for a single player.

        Args:
            df_pred: DataFrame containing historical and target rows generated by the
                prediction pipeline (typically includes model-ready features).
            df_npred: DataFrame containing the complementary rows not used for prediction,
                usually with added metadata for plotting.
            preds: Model output tensor for the selected player. Expected shape is `[1, T, 2]`
                or equivalent, holding absolute `(x, y)` coordinates.
            game_id: Game identifier specifying which play to plot.
            play_id: Play identifier specifying which play to plot.
            nfl_id: Player identifier whose trajectory should be displayed.
            preds_dict: Optional dictionary mapping `nfl_id` to numpy arrays of predicted
                positions. Used when predictions for multiple players are available.
            save_fig_path: Optional path. When provided, the plot is saved before showing.

        Notes:
            - Historical ground-truth frames are rendered as solid lines using the team colour.
            - Target (future) ground-truth frames are dashed with the team colour.
            - Predictions appear as green dotted lines with square markers, trimmed to match
              the available ground-truth horizon.
        """
        df = pd.concat([df_pred, df_npred], ignore_index=True)
        d = df[(df["game_id"] == game_id) & (df["play_id"] == play_id)].copy()
        if d.empty:
            raise ValueError(f"No rows for game_id={game_id}, play_id={play_id}")

        has_side = "player_side" in d.columns
        if has_side:
            d["player_side"] = d["player_side"].astype(str).str.strip().str.capitalize()

        color_map = {"Offense": "blue", "Defense": "maroon"}
        default_color = "black"

        plt.figure(figsize=(8, 4))

        # ball landing (optional)
        if "ball_land_x_yds" in d.columns and "ball_land_y_yds" in d.columns:
            hist_any = d[d["phase"] == "hist"]
            if not hist_any.empty:
                blx = hist_any["ball_land_x_yds"].dropna().unique()
                bly = hist_any["ball_land_y_yds"].dropna().unique()
                if len(blx) > 0 and len(bly) > 0:
                    plt.scatter([blx[0]], [bly[0]], marker="*", s=120, label="Ball Landing", color="gray")

        # single legend entries per side
        legend_done = {"Pre": False, "Post": False, "Pred": False, "Unknown": False}

        # group by player
        for nid, gp in d.groupby("nfl_id"):
            if nid != nfl_id:
                continue
            hist = gp[gp["phase"] == "hist"].sort_values("frame_num")
            tgt  = gp[gp["phase"] == "target"].sort_values("frame_num")

            side = gp["player_side"].iloc[0] if has_side else "Unknown"
            c = color_map.get(side, default_color)
            side_key = side if side in ("Offense", "Defense") else "Unknown"
            #side_label = (None if legend_done[side_key] else side_key)

            # GT: pre-throw
            if not hist.empty:
                lbl = None if legend_done["Pre"] else "Pre-Throw"

                plt.plot(hist["x_pos_yds"].values, hist["y_pos_yds"].values,
                        linestyle="-", linewidth=1.6, color=c, label=lbl)

                legend_done["Pre"] = True

                x_last, y_last = hist["x_pos_yds"].values[-1], hist["y_pos_yds"].values[-1]
                plt.scatter([x_last], [y_last], marker="x", color=c)
                plt.text(x_last, y_last, f"{int(nid)}", fontsize=7, ha="left", va="bottom", color=c)
                legend_done[side_key] = True

            # GT: post-throw
            if not tgt.empty:
                lbl = None if legend_done["Post"] else "Post-Throw (Target)"
                plt.plot(tgt["x_pos_yds"].values, tgt["y_pos_yds"].values,
                        linestyle="--", linewidth=1.3, color=c, alpha=0.7,label=lbl)
                legend_done["Post"] = True

            # PREDICTION: post-throw
            if preds_dict is not None and nid in preds_dict:
                xy_pred = preds.squeeze(0).detach().cpu().numpy() # [T,2]
                #xy_pred = preds_dict[nid]  # [T,2]
                lbl = None if legend_done["Pred"] else "Prediction"
                plt.plot(xy_pred[:,0], xy_pred[:,1],
                        linestyle=(0,(1,2)), linewidth=1.5, marker="s", markersize=3,
                        color='green', label=lbl)
                
                legend_done["Prediction"] = True

        plt.title(f"Play {play_id} â€” Game {game_id} (GT vs Prediction)")
        plt.xlabel("x (yards)"); plt.ylabel("y (yards)")
        #plt.xlim(0, 120); plt.ylim(0, 53.3)
        plt.grid(True, linestyle=":")
        plt.legend(loc="best")
        plt.tight_layout()
        if save_fig_path:
            plt.savefig(save_fig_path)
        plt.show()
        
